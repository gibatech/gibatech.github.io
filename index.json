[{"content":"Se você está começando no mundo do desenvolvimento front-end e está procurando materiais, pode ficar confuso com a quantidade de nomenclaturas, tais como React, Next, Webpack, NPM, Yarn, Bootstrap e muitas outras. Realmente, há muitas tecnologias envolvidas nesse processo, mas esta página tem como objetivo esclarecer um pouco mais sobre cada uma delas.\nAssim como no desenvolvimento de backend, o front-end também está se tornando cada vez mais complexo e exigente. Para criar aplicações maiores e mais poderosas, pode ser necessário utilizar várias bibliotecas e frameworks, assim como no desenvolvimento de backend.\nProcura por materiais de Backend? Busque aqui: Guia Backend.\nFerramentas de Build (Build Tool) As ferramentas de build servem para facilitar a instalação de dependências, comandos necessários para testes, execução ou publicação, por exemplo. As soluções mais utilizadas são:\nNPM YARN PNPM Outros exemplos apenas a título de curiosidade são o BIT, GRUNT e o GULP.\nEmpacotador (Module Bundler) Além do processos de build em si, há algumas ferramentas mais especializadas para as ações de build, execução e publicação, como compactar recursos (como estilos e scripts), disponibilizar recursos estáticos, além de permitir a separação da aplicação em módulos. Algumas das ferramentas utilizas:\nWebpack Vite Outras ferramentas semelhantes: Browserify, Rollup e o Turbopack.\nComparando com o backend, no caso do mundo Java, não existe esse tipo de ferramenta pois essas ações normalmente são feitas pelo próprio Build Tool (Gradle/Maven).\nFrameworks/Bibliotecas de Construção de Interfaces Somente aqui vemos ferramentas como o React aparecer. Como uma biblioteca de renderização de componentes para a web, ele funciona integrado ao código de forma a permitir a criação e renderização de páginas e partes da página de forma dinâmica e componentizada. Ou seja, podemos ter uma aplicação com NPM+Webpack+React ou YARN+Browserify+React se assim quisermos.\nVamos ver alguns dos frameworks e bibliotecas mais conhecidos:\nReact Angular Vue.Js Ember.Js Preact Você também pode desenvolver utilizando apenas JavaScript (chamado de VanilaJS).\nOutras bibliotecas e frameworks Apenas para ajudar por onde começar, listamos alguns projetos interessantes que valem um estudo:\nComponentes e plugins para criação de interfaces:\nBootstrap Tailwind CSS Flexbox Grid Entre outros.\nPara escrita de Testes:\nJest Mocha Jasmine Ferramentas \u0026ldquo;tudo-em-um\u0026rdquo; Há algumas ferramentas que se propôe a simplificar toda essa complexidade que é a criação e configuração dos projetos de frontend tornando a criação simples e auto-configurada.\nDestacamos essas que merecem atenção:\nCreate React App - Forma clássica de obter um projeto React com as configurações necessárias com poucos passos.\nNextJS - Framework que traz todas as funcionalidades necessárias para uma aplicação React de forma auto-configurada, tanto para renderização no navegador, como código estático, quanto para renderização no servidor, com NodeJS.\nNuxtJS - Abstração que também foca em simplicidade de configuração para aplicações VueJs.\nConclusão Espero que este material tenha te ajudado a entender um pouco mais sobre as ferramentas e siglas utilizadas no Frontend. Deixe seu comentário com sugestões ou contando sua experiência estudando Frontend :)\nOutros materiais Para outros materiais de Frontend, acesse aqui: Tag Frontend\n","permalink":"https://gibatech.lptn.com.br/frontend/","summary":"Se você está começando no mundo do desenvolvimento front-end e está procurando materiais, pode ficar confuso com a quantidade de nomenclaturas, tais como React, Next, Webpack, NPM, Yarn, Bootstrap e muitas outras. Realmente, há muitas tecnologias envolvidas nesse processo, mas esta página tem como objetivo esclarecer um pouco mais sobre cada uma delas.\nAssim como no desenvolvimento de backend, o front-end também está se tornando cada vez mais complexo e exigente.","title":"Guia Frontend"},{"content":"Passando para comunicar que incrementamos o Guia! A partir de agora temos uma seção Frontend especialmente preparada para você que está começando os estudos e está tentando entender onde se encaixa cada uma das tecnologias!\nAcesse o Guia Frontend e bons estudos!\n","permalink":"https://gibatech.lptn.com.br/posts/novidades/guia-frontend/","summary":"Passando para comunicar que incrementamos o Guia! A partir de agora temos uma seção Frontend especialmente preparada para você que está começando os estudos e está tentando entender onde se encaixa cada uma das tecnologias!\nAcesse o Guia Frontend e bons estudos!","title":"Publicação do Guia Frontend"},{"content":"O Spring Data é uma abstração criada pelo Spring para interigirmos com dados, sejam de fontes relacionais ou não relacionais. Além de fornecer as operações mais comuns como listar ou salvar prontas, também provê formas mais práticas de personalizar novos tipos de operações.\n1. Recursos Suporte a bancos relacionais e vários não relacionais Interfaces prontas para uso Anotações para personalização Materiais em vídeo: Fizemos uma seleção dentre os vídeos para ajudá-lo a entender mais sobre o assunto:\nMais informações: Seguem materiais adicionais, lembrando que sempre a documentação oficial é a melhor fonte, seguido de outros sites e fóruns:\n","permalink":"https://gibatech.lptn.com.br/frameworks/spring/data/","summary":"O Spring Data é uma abstração criada pelo Spring para interigirmos com dados, sejam de fontes relacionais ou não relacionais. Além de fornecer as operações mais comuns como listar ou salvar prontas, também provê formas mais práticas de personalizar novos tipos de operações.\n1. Recursos Suporte a bancos relacionais e vários não relacionais Interfaces prontas para uso Anotações para personalização Materiais em vídeo: Fizemos uma seleção dentre os vídeos para ajudá-lo a entender mais sobre o assunto:","title":"Spring Data"},{"content":"Os Profiles ou perfis de execução de uma aplicação nos permitem diferentes configurações de acordo com o ambiente ou objetivo da execução. Por exemplo, precisamos de um banco de dados H2 localmente, com certo usuário e senha, mas em produção usamos um Postgres com outro usuário e senha. Ainda, podemos ter algum teste que usa uma terceira configuração, por exemplo, com um banco desconfigurado para simular um erro de execução.\nPara estas variações de execução temos os Profiles. Esta é uma funcionalidade central do Spring e está presente tanto no SpringBoot quanto diretamente na raiz do Spring. Com ela podemos criar diferentes arquivos de configuração para nossa aplicação, e quando \u0026ldquo;executamos\u0026rdquo; podemos informar qual \u0026ldquo;profile\u0026rdquo; queremos utilizar.\nDada a explicação inicial, vamos ver como \u0026ldquo;criar\u0026rdquo; profiles e como utilizá-los:\n1.Criando profiles Cabe dizer que o nome dos profiles não são predefinidos e você pode ser criativo, mas usualmente eles são simples e alfanuméricos. Exemplos de bons nomes de profiles: \u0026ldquo;local\u0026rdquo;, \u0026ldquo;testes\u0026rdquo;, \u0026ldquo;testes-kafka\u0026rdquo;, \u0026ldquo;producao\u0026rdquo; ou mesmo \u0026ldquo;cliente345\u0026rdquo;. Dito isso, há basicamente duas formas de \u0026ldquo;definir\u0026rdquo; esses nomes de profiles:\n1.1.Limitando uso de SpringBeans com Profiles Por exemplo, supondo que temos um SpringBean (classe Java com algum stereotype) de configuração de banco Postgresql, que só queremos que seja executado em Produção. Podemos utilizar nesta classe a anotação @Profile indicando que queremos que funcione somente no profile \u0026ldquo;prod\u0026rdquo;:\n@Component @Profile(\u0026#34;prod\u0026#34;) public class ConfigurePostgresConfig { //Método de configuração omitido... } Neste caso esse \u0026ldquo;SpringBean\u0026rdquo; será carregado para o contexto do Spring somente se o profile for especificamente \u0026ldquo;prod\u0026rdquo;. Ainda é possível colocar uma lista de profiles nesta anotação ou fazer lógica como \u0026ldquo;OU\u0026rdquo;, \u0026ldquo;E\u0026rdquo; ou \u0026ldquo;NEGAÇÃO\u0026rdquo; mas não abordaremos esses exemplos aqui. Olhe a documentação adicional para esses casos.\n1.2.Diferenciando configurações com Profiles No caso de configurações podemos criar arquivos para cada cenário, e eles podem ser no formato \u0026ldquo;properties\u0026rdquo; ou \u0026ldquo;yaml\u0026rdquo;. Porém, não basta criarmos o arquivo, ele deve seguir um padrão:\napplication-{nomeprofile}.{properties ou yml}\nExemplos de nomes válidos: application-prod.yaml, application-local.properties, application-teste-integrado.yaml. Nestes casos os profiles são \u0026ldquo;prod\u0026rdquo;, \u0026ldquo;local\u0026rdquo; e \u0026ldquo;teste-integrado\u0026rdquo; respectivamente.\nOBS:\nAinda há o arquivo \u0026ldquo;application.yaml\u0026rdquo; ou \u0026ldquo;application.properties\u0026rdquo; considerado o profile padrão (default). A extensão \u0026ldquo;yaml\u0026rdquo; também pode ser escrita apenas \u0026ldquo;yml\u0026rdquo;. Com algumas configurações no projeto o prefixo \u0026ldquo;application\u0026rdquo; pode ser substituído por \u0026ldquo;bootstrap\u0026rdquo;. Neste caso, por exemplo podemos ter um arquivo \u0026ldquo;bootstrap-local.yml\u0026rdquo; também válido. 2.Utilizando profiles Para fazermos nossa aplicação ler e utilizar um destes arquivos de configuração, ou mesmo considerar o profile para descartar um \u0026ldquo;SpringBean\u0026rdquo; da configuração temos de indicar qual (ou quais) profiles queremos utilizar na inicialização da aplicação. Podemos fazer isso de algumas formas:\n2.1.Através do application.yml/application.properties Esses arquivos, por serem o \u0026ldquo;profile padrão\u0026rdquo; SEMPRE são lidos, então dentro deles podemos declarar uma propriedade \u0026ldquo;spring.profiles.active\u0026rdquo; indicando qual profile também deve ser considerado. Exemplo:\narquivo application.properties (profile padrão):\nspring.profiles.active=local arquivo application-local.properties (profile local):\nlogging.level.root=debug 2.2.Através de variável de ambiente Podemos definir uma variável tanto na nossa IDE quanto no próprio sistema operacional denominada \u0026ldquo;SPRING_PROFILES_ACTIVE\u0026rdquo;. Por exemplo, no linux, ao configurarmos atráves de export SPRING_PROFILES_ACTIVE=dev estamos exportando no bash uma variável ativando o profile \u0026ldquo;dev\u0026rdquo;.\n2.3.Através de parâmetros de execução Podemos ainda definir um parâmetro \u0026ldquo;spring.profiles.active\u0026rdquo;. Os parâmetros de JVM normalmente são passados utilizando \u0026ldquo;-D\u0026rdquo;, então no caso ficaria: -Dspring.profiles.active=dev para ativar o profile \u0026ldquo;dev\u0026rdquo;.\nAinda é possível fixar essa variável \u0026ldquo;spring.profiles.active\u0026rdquo; programaticamente no Java, como propriedade de projetos Maven ou Gradle. Em todos os casos irá funcionar, resta escolher a melhor forma de configurar essa propriedade.\nMateriais em vídeo: Fizemos uma seleção dentre os vídeos para ajudá-lo a entender mais sobre o assunto:\nMais informações: Seguem materiais adicionais, lembrando que sempre a documentação oficial é a melhor fonte, seguido de outros sites e fóruns:\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.profiles https://www.baeldung.com/spring-profiles https://emmanuelneri.com.br/2017/05/14/profiles-no-spring-boot/ https://imasters.com.br/back-end/utilizando-os-perfis-de-spring-e-a-configuracao-java ","permalink":"https://gibatech.lptn.com.br/frameworks/spring/profiles/","summary":"Os Profiles ou perfis de execução de uma aplicação nos permitem diferentes configurações de acordo com o ambiente ou objetivo da execução. Por exemplo, precisamos de um banco de dados H2 localmente, com certo usuário e senha, mas em produção usamos um Postgres com outro usuário e senha. Ainda, podemos ter algum teste que usa uma terceira configuração, por exemplo, com um banco desconfigurado para simular um erro de execução.","title":"Spring Boot - Profiles"},{"content":"O que é? Qual o uso? Bom, resumidamente o Apache Kafka é uma plataforma de mensageria que possibilita alta capacidade no envio de mensagens, possui alta tolerância e de forma distribuída. Também é Open Source e utilizada por grandes empresas com problemas em grande volumes de processamento de dados. Ficou interessado? Olhe os vídeos a seguir e bons estudos!\nVídeos Para começar, é interessante ver esse material do O Hipsters ponto Tube. É um material bem compacto mas muito interessante:\nPara complementar vale a pena ver este vídeo do Código Fonte TV! Ele tem 11 minutos e dá um resumo muito bem pensado sobre o Kafka! Vale a pena!\nMais informações: https://kafka.apache.org/ https://spring.io/projects/spring-kafka ","permalink":"https://gibatech.lptn.com.br/mensageria/kafka/","summary":"O que é? Qual o uso? Bom, resumidamente o Apache Kafka é uma plataforma de mensageria que possibilita alta capacidade no envio de mensagens, possui alta tolerância e de forma distribuída. Também é Open Source e utilizada por grandes empresas com problemas em grande volumes de processamento de dados. Ficou interessado? Olhe os vídeos a seguir e bons estudos!\nVídeos Para começar, é interessante ver esse material do O Hipsters ponto Tube.","title":"Apache Kafka"},{"content":"O que é? Qual o uso? A ideia deste projeto é reduzir a quantidade de código repetitivo que escrevemos no Java. Métodos de leitura e escrita de campos (getters/setters), construtores com ou sem argumentos, tudo se resume a anotações com o Lombok! Poderia ficar melhor? Sim, ele consegue criar até classes de Builders com a mesma facilitade. Dá uma olhada nesse vídeo pra conferir:\nVídeos O Felipe Públio tem um material interessante sobre o tema:\nMais informações: https://projectlombok.org/ ","permalink":"https://gibatech.lptn.com.br/bibliotecas/geradores/lombok/","summary":"O que é? Qual o uso? A ideia deste projeto é reduzir a quantidade de código repetitivo que escrevemos no Java. Métodos de leitura e escrita de campos (getters/setters), construtores com ou sem argumentos, tudo se resume a anotações com o Lombok! Poderia ficar melhor? Sim, ele consegue criar até classes de Builders com a mesma facilitade. Dá uma olhada nesse vídeo pra conferir:\nVídeos O Felipe Públio tem um material interessante sobre o tema:","title":"Project Lombok"},{"content":"Asserções de forma fluída para o Java.\nPara que serve AssertJ é uma biblioteca Java que fornece um conjunto rico de asserções e mensagens de erro verdadeiramente úteis, melhora a legibilidade do código de teste e é projetada para ser fácil de usar em seu IDE favorito.\nFuncionalidades Asserções com recursos do Java 8 Mensagens de erro descritivas Conjuntos de asserções (SoftAssertions) Iniciando uma asserção .assertThat(resultado) // Tudo inicia a partir do assertThat() .isEqualTo(esperado) // seguido dos método que olharemos Asserções para itens individuais .assertThat(resultado) .as(\u0026#34;Nome: %s\u0026#34;, nome) // Mensagem descritiva em caso de falha. .isEqualTo(algo) // Equals clássico Asserções para coleções ou arrays .assertThat(colecao) .filteredOn(predicate, lambda ou field) // Filtra os itens .containsOnly(item...) // Exatamente os itens existentes .contains(item...) // Um ou mais itens que devem existir .doesNotContain(item...) // Um ou mais itens que não devem existir .extracting(lambda ou field) // Extrai campo(s) dos itens do array .flatExtracting(lambda ou field) // Extrai campo(s) do tipo lista de cada item do array Testando uma exceção .assertThatThrownBy(() -\u0026gt; acao()) // Ação que dispara uma exceção .isInstanceOf(Exception.class) // Valida o tipo da exceção .hasMessageContaining(\u0026#34;Erro X\u0026#34;) // Valida a mensagem //ou assertThatExceptionOfType(Exception.class) // Valida o tipo da exceção .isThrownBy() // Ação que dispara uma exceção .withMessage(\u0026#34;%s!\u0026#34;, \u0026#34;Erro X\u0026#34;) // Valida a mensagem .withMessageContaining(\u0026#34;Erro X\u0026#34;) // Ou parte da mensagem Notas curiosas Além do Core, o AssertJ possui módulos extras para Guava, Joda, Neo4J, Databases e Swing. Você pode encadear um conjunto de assertions com o SoftAssertions coletando todos os erros ao mesmo tempo em vez de parar em cada Asserção individual. Você pode fazer asserção com o conteúdo de um arquivo utilizando assertThat(contentOf(arquivo)). Mais informações: https://assertj.github.io/doc/ ","permalink":"https://gibatech.lptn.com.br/bibliotecas/testes/asssertj/","summary":"Asserções de forma fluída para o Java.\nPara que serve AssertJ é uma biblioteca Java que fornece um conjunto rico de asserções e mensagens de erro verdadeiramente úteis, melhora a legibilidade do código de teste e é projetada para ser fácil de usar em seu IDE favorito.\nFuncionalidades Asserções com recursos do Java 8 Mensagens de erro descritivas Conjuntos de asserções (SoftAssertions) Iniciando uma asserção .assertThat(resultado) // Tudo inicia a partir do assertThat() .","title":"AssertJ"},{"content":"","permalink":"https://gibatech.lptn.com.br/bibliotecas/persistencia/hibernate/","summary":"","title":"Hibernate"},{"content":"","permalink":"https://gibatech.lptn.com.br/bibliotecas/testes/junit/","summary":"","title":"JUnit"},{"content":"","permalink":"https://gibatech.lptn.com.br/bibliotecas/geradores/map-struct/","summary":"","title":"Map Struct"},{"content":"","permalink":"https://gibatech.lptn.com.br/bibliotecas/testes/mockito/","summary":"","title":"Mockito"},{"content":"Como framework principal o Spring Boot que é um dos mais estabelecidos para Java.\nRecursos: Spring Profiles Spring Data Spring Cloud Vídeo: Para conhecer melhor suas funcionalidades, esse vídeo da Alga Works explica bem para os fundamentos:\nMais informações: https://spring.io/projects/spring-boot ","permalink":"https://gibatech.lptn.com.br/frameworks/spring-boot/","summary":"Como framework principal o Spring Boot que é um dos mais estabelecidos para Java.\nRecursos: Spring Profiles Spring Data Spring Cloud Vídeo: Para conhecer melhor suas funcionalidades, esse vídeo da Alga Works explica bem para os fundamentos:\nMais informações: https://spring.io/projects/spring-boot ","title":"Spring Boot"},{"content":"Não é um assunto necessariamente recente, porém restam controvérsias e, sem dúvidas, ainda cabe uma opinião.\nLegados não são ruins. Ruins são as gambiarras, a ausência de testes e de boas práticas de desenvolvimento. Colocar a mesma equipe que desastrosamente sustenta um legado para criar uma nova API fresquinha, com o último framework da moda é potencializar as chances de criação de código ruim, frequentemente chamado de legado.\nTambém incorro no erro de chamar de construção de novos legados quando vejo códigos escritos de qualquer forma. Mas é força do hábito. Muitas vezes pensei que a solução para melhorar um software era reescrevê-lo, não por convicção própria, pois muitas vezes o CTO da empresa ou o arquiteto induziram a equipe a pensar desta forma. Fato é que essa abordagem nunca resolveu o problema inicial. Meses após o início das migrações sempre parece haver um \u0026ldquo;novo legado\u0026rdquo;.\nE o que acontece ao tentar escrever um novo software com os mesmos vícios de programação? Temos dois softwares ruins para manter, com a mesma equipe que já não aguenta manter o legado. Óbvio que é tentador explorar novos frameworks e linguagens. E o ganho de velocidade realmente surpreende nas primeiras Sprints pois, obviamente, ainda não está uma bagunça completa: ela vem com o tempo. A situação ainda é agravada com os microsserviços e com a criação de novas APIs de forma desenfreada e sem qualidade.\nO problema é colocado sobre o sistema, mas na verdade deveria ser sobre a sua forma de manutenção. Não há uma atenção especial à qualidade e melhoria contínua, haja vista que o foco é criar os entregáveis e fazer as peças funcionarem a todo custo. Há uma pressão clara de entrega e isso faz parte do negócio, mas os desenvolvedores devem contrapor isso com seus pontos técnicos ao longo das Sprints.\nA equipe de desenvolvimento deve continuamente levantar débitos, ajustar desvios e executar pequenas refatorações. Estas não deveriam exigir um Sprint dedicado apenas a débitos técnicos de tempos em tempos, mas sim pequenas tarefas dentro de cada Estória, melhorando continuamente o código e a arquitetura. Olhar com a visão de escoteiro, melhorando pouco a pouco cada classe alterada irá dar uma sustentabilidade muito maior ao sistema, deixando mais fácil adicionar novas features.\nE se o framework ficar defasado? Inseguro? Precisar ser escalado? Bem, se o software foi bem cuidado pode ser planejada uma estratégia de migração ou fracionamento. As classes de negócio poderão ser reaproveitadas, se mantida a linguagem, mas as demais provavelmente terão de ser reescritas. Será doloroso, contudo a migração será mais curta e garante foco total em apenas uma aplicação, sem legados.\nPublicado também na comunidade DEV! Vá lá e comente :)\nhttps://dev.to/gilbertolptn/criando-sistemas-legados-com-o-framework-da-moda-5gcj\n","permalink":"https://gibatech.lptn.com.br/posts/codigo/criando-sistemas-legados-com-o-framework-da-moda/","summary":"Não é um assunto necessariamente recente, porém restam controvérsias e, sem dúvidas, ainda cabe uma opinião.\nLegados não são ruins. Ruins são as gambiarras, a ausência de testes e de boas práticas de desenvolvimento. Colocar a mesma equipe que desastrosamente sustenta um legado para criar uma nova API fresquinha, com o último framework da moda é potencializar as chances de criação de código ruim, frequentemente chamado de legado.\nTambém incorro no erro de chamar de construção de novos legados quando vejo códigos escritos de qualquer forma.","title":"Criando sistemas legados com o framework da moda"},{"content":"Fala-se sobre Código Limpo há algum tempo, sobre funcionalidades que melhoram a legibilidade do código e bibliotecas que agilizam e deixam o código menor e, às vezes, melhor. Mas há questões bem mais fundamentais que não podem ser esquecidas ou despriorizadas em relação àqueles assuntos mais populares, entre eles, a nomenclatura de tudo o que está sendo escrito.\nQuando precisamos realizar alterações em um sistema já desenvolvido, mas desconhecido, temos a necessidade de avaliar, como um todo, quais são suas funcionalidades. Certas vezes nem mesmo é desconhecido, mas trabalhado há alguns meses e com detalhes específicos de arquitetura para relembrar. Esse sistema provavelmente está em produção e quebrar algo em funcionamento não é uma possibilidade.\nNum primeiro momento pouco importam as bibliotecas utilizadas, a versão da linguagem ou mesmo detalhes do ambiente de execução. A primeira coisa que devemos observar no sistema para saber qual é o seu domínio de negócio são suas classes e pacotes. Depois, olhamos para seus atributos e métodos, a fim de entender os recursos que cada parte do domínio tem. Em terceiro, analisamos os testes, que irão dizer como os recursos devem se comportar. Somente após isso, pode-se passar aos detalhes da tecnologia, versões, ambientes e bibliotecas.\nGuarde esta ordem:\nClasses e seus pacotes Atributos e Métodos Testes Numa aplicação em que não puder ser obtida uma visão geral seguindo os passos mencionados, certamente não é orientada a objetos, mesmo que use uma linguagem dita como OO. Não conhece Orientação a Objetos mas está lendo este artigo? Que bom, é um ótimo começo!\nPor que os pacotes estão no primeiro item? Os pacotes estão juntos às classes para sustentá-las. Pouco importa ter um pacote se não existir uma classe dentro deste. Porém, caso seja ignorada a sua importância, deixando as classes mal distribuídas, tornará muito difícil encontrar a sua localização. Sem falar que se o sistema crescer, irá virar uma bagunça.\nHá quem considere a divisão dos pacotes a parte mais simples, afirmando que são sempre os mesmos: entidade, serviço, dao, util, rest\u0026hellip; Outros discordarão com veemência dizendo que preferem repositorio à dao e controlador à rest. Algum deles está correto? De certa forma, sim. Esta quebra por camadas é muito utilizada, e comum para quem está começando a trabalhar com MVC. É uma abordagem sem grandes dúvidas: em pouco tempo está definida para toda a vida do projeto e o restante do tempo fica com a codificação.\nAgora, trago a verdade sobre os pacotes. Essa divisão simples por camadas é como colocar uma caixa escrito \u0026ldquo;gavetas\u0026rdquo; na sua garagem e juntar todas as gavetas da casa ali dentro: gavetas da cozinha, do guarda-roupas, do armário de produtos de limpeza. Faz sentido? Claro, deixamos todas as gavetas, que possuem a mesma finalidade juntas, não é verdade? Mas na prática isso tem pouco sentido, principalmente em sistemas maiores, onde temos dezenas de classes na mesma camada. Por que faríamos diferente com o nosso software? Faz muito mais sentido deixar coisas onde realmente são utilizadas do que juntá-las no mesmo local.\nMas como seria essa organização? Seguindo o mesmo exemplo, pense nos cômodos da casa como pacotes e nos compartimentos dos cômodos como subpacotes. Dentro deles estarão as ferramentas ou utensílios, ou seja, as classes. Então:\nCozinha Armário Gaveta Talheres Balcão Fogão Sala Quarto Guarda-roupas Gaveta Meias Não achou que poderia organizar sua casa em pacotes, subpacotes e classes? Pois é. A orientação a objetos é a melhor forma pra isso, trazer abstrações do mundo real para dentro de um sistema, de forma que se alguém pedir para adicionar uma funcionalidade de \u0026ldquo;bancada\u0026rdquo; no armário da cozinha, saberemos exatamente onde criar o pacote e suas classes. Não é uma forma fácil e vai gerar muitas dúvidas, mas fica mais próximo da realidade, o que é bom para a Orientação a Objetos.\nCerto\u0026hellip; E as classes? Pois bem, já definimos os pacotes e agora podemos pensar de fato nas classes. Utilizando a abordagem de divisão por lógica que vimos a pouco, sabemos que devemos deixar as classes relacionadas próximas. Dentre estas, as mais importantes do nosso sistema são àquelas do domínio do negócio, as quais contém características, estado e ações. Classes como Aluno, Turma, Cliente, Animal, Pagamento são exemplos disso.\nEssas classes do domínio do negócio, conhecidas como modelo, também podem se tornar entidades, se forem relacionadas a um banco de dados. Eventualmente estas entidades precisam ser listadas, criadas, apagadas ou atualizadas, sendo que neste caso delegamos a uma classe de persistência, normalmente chamada de repositório ou dao. Além da própria entidade e seu repositório, ainda é comum o uso de uma classe onde as regras de negócio entre diferentes entidades são relacionadas, chamadas de serviço.\nAssim, temos três classes intrinsecamente relacionadas: a Entidade, seu Repositório e seu Serviço. Com muita dificuldade conseguiremos separá-las, razão pela qual devem permanecer no mesmo pacote.\nAinda, as classes de Serviço podem vir a ficar sobrecarregadas devido à quantidade de regras e operações que algumas entidades tem. Logo, para melhorar a manutenção deste código, devem ser decompostas em classes específicas, reduzindo a complexidade e organizando as responsabilidades. Por exemplo, em um sistema de Petshop, poderíamos ter um pacote animal, com as classes Animal, AnimalRepositorio, AnimalService, AnimalAlimentacaoServicoe AnimalSaudeServico. Isso, considerando que a \u0026ldquo;alimentação\u0026rdquo; e \u0026ldquo;saúde\u0026rdquo; dos animais possuem muitas regras que justifiquem a divisão. O uso da nomenclatura em inglês também é comum, contudo não é relevante para este artigo, desde que você adote um padrão: service e repository.\nSó estas classes compõe uma aplicação? De fato não conseguimos fazer todo o necessário somente com estas classes, pois nossos modelos quase sempre precisam conversar com o mundo externo. Para isso, serão necessários Controllers, Clientes de APIs, Filas, etc. Essas classes fazem parte de uma aplicação, mas não são parte do \u0026ldquo;negócio\u0026rdquo;, então considere separar esses recursos tecnológicos em algum pacote específico como api, infra, cliente, etc\u0026hellip;\nAlém disso, precisamos de utilitários que nos ajudam a manter a abstração dentro de nossos modelos, e também são aceitos. Eles normalmente são conhecidos como Builders, Factories, Converters, Mappers, etc. Mas pense que o objetivo destes é simplificar a lógica das classes de negócio, apenas isso.\nOk, organizamos nosso negócio em pacotes e classes, mas onde de fato ficam nossas regras e informações? Nesse momento entram os atributos de nossas classes para armazenar as informações, características e estado. E os métodos para realizar as ações, mudanças de estado e validações. Da mesma forma que os pacotes e classes devem ser precisamente pensados para dar sentido à nossa organização.\nOs atributos devem parecer com características ou estado. Devem fazer sentido para o negócio e não conter prefixos ou sufixos tecnológicos que não ajudam na abstração. Ou seja, prefira \u0026ldquo;tamanho\u0026rdquo; à \u0026ldquo;nroTamanho\u0026rdquo;, por exemplo.\nQuanto aos métodos, também devem parecer ações do negócio e mudança de estado e, ainda, evitar prefixos e sufixos que não auxiliam na compreensão do negócio. Caso sejam necessárias conversões, cópia de objetos ou quaisquer outras ações que não fazem parte do comportamento natural do negócio, considere criar as classes que citamos anteriormente, como Converters, Mappers, Builders, Factories\u0026hellip;\nTestes?! Bem, como último dentre os itens citados, mas não menos relevante, temos os testes. Sua posição deve-se unicamente pela ordem natural de entender a visão geral da arquitetura, o contexto de cada uma das funcionalidades e aí sim adentrar nos detalhes da implementação.\nChegada esta etapa podemos interpretar de fato o que o sistema poderia e deveria fazer, e os testes são bons para nos contar isso: além dos cenários principais os testes nos mostram os secundários e os de exceção, com a reação prevista do software quando nem tudo sai conforme gostaríamos. Esse tipo de informação é difícil de extrair de alguns códigos de produção ou implícitos em outros, mas os testes tendem a deixá-los explícitos, o que facilita o trabalho de manutenção.\nEncerra-se por aqui a discussão? Com certeza não! Existem diversas abordagens de organização e arquitetura. Aqui trago uma visão subjetiva do que considero importante após alguns anos de programação, objetivando que seja dada maior ênfase à abstração do negócio, que é o motivador para a criação dos sistemas, em vez da tecnologia, bibliotecas e termos que afastam o propósito real do código.\nTambém não foi o objetivo falar especificamente sobre uma ou outra arquitetura, mas há muito material disponível. Se você ficou motivado, considere pesquisar sobre DDD e Arquitetura Hexagonal.\n","permalink":"https://gibatech.lptn.com.br/posts/codigo/voce-esta-organizando-e-nomeando-seu-codigo-corretamente/","summary":"Fala-se sobre Código Limpo há algum tempo, sobre funcionalidades que melhoram a legibilidade do código e bibliotecas que agilizam e deixam o código menor e, às vezes, melhor. Mas há questões bem mais fundamentais que não podem ser esquecidas ou despriorizadas em relação àqueles assuntos mais populares, entre eles, a nomenclatura de tudo o que está sendo escrito.\nQuando precisamos realizar alterações em um sistema já desenvolvido, mas desconhecido, temos a necessidade de avaliar, como um todo, quais são suas funcionalidades.","title":"Você está organizando e nomeando seu código corretamente?"},{"content":"gsutil -m rsync -R public gs://inova.poa.br\ngsutil web set -m index.html -e 404.html gs://inova.poa.br gsutil defacl ch -u allUsers:READER gs://inova.poa.br gsutil -m acl ch -r -u AllUsers:R gs://inova.poa.br\n","permalink":"https://gibatech.lptn.com.br/posts/cloud/comandos-uteis/","summary":"gsutil -m rsync -R public gs://inova.poa.br\ngsutil web set -m index.html -e 404.html gs://inova.poa.br gsutil defacl ch -u allUsers:READER gs://inova.poa.br gsutil -m acl ch -r -u AllUsers:R gs://inova.poa.br","title":"Automação de Build"},{"content":"Este é um guia de comando úteis para utilização em ambiente Linux. São basicamente minhas notas de aula utilizadas durante os treinamentos que ministrava, mas podem ser úteis em vários contextos.\nRede Arquivos e pastas importantes: /etc/syconfig/network-scripts/ /etc/hosts /etc/host.conf /etc/resolv.conf Comandos dhClient: Autoconfiguração de rede. Se você estiver em uma máquina sem internet e precisar de uma configuração automática e rápida, tente este comando. /etc/rc.d/init.d/network stop ou start: Para ou inicia um serviço de sistema. Este é específico para sistemas Linux que usam o InitD. Isto vem mudando a bastante tempo principalmente para o SystemD, e pode ser que tenha de rodar systemctl start networking.service. route -n: Lista a tabela de roteamento de rede configurada. Da mesma forma, pode funcionar com netstat -r OU cat /proc/net/route. dig site.com.br: Consulta o servidor DNS configurado no arquivo resolv.conf exibindo suas configurações. ","permalink":"https://gibatech.lptn.com.br/posts/linux/comandos-uteis/","summary":"Este é um guia de comando úteis para utilização em ambiente Linux. São basicamente minhas notas de aula utilizadas durante os treinamentos que ministrava, mas podem ser úteis em vários contextos.\nRede Arquivos e pastas importantes: /etc/syconfig/network-scripts/ /etc/hosts /etc/host.conf /etc/resolv.conf Comandos dhClient: Autoconfiguração de rede. Se você estiver em uma máquina sem internet e precisar de uma configuração automática e rápida, tente este comando. /etc/rc.d/init.d/network stop ou start: Para ou inicia um serviço de sistema.","title":"Automação de Build"},{"content":"As ferramentas descritas aqui são base para o desenvolvimento Java e podem ser obtidas gratuitamente (legalmente) através dos links disponibilizados\nIntellij Link: https://www.jetbrains.com/idea/download/\nAcesse a URL e faça download da versão Community para seu sistema operacional. Ele funciona da mesma forma no Linux, Mac ou Windows.\nJava Link: https://www.java.com/pt_BR/download/\nAcesse a URL e faça download para seu sistema.\nHá uma alternativa que pode ser utilizada sem problemas não vinculada à Oracle: O OpenJDK.\nLink: https://adoptopenjdk.net/\nCliente Rest Esta ferramenta é util caso você esteja construindo API\u0026rsquo;s Rest. Há alternativas como extensões para Chrome e Firefox mas o Postman possui mais recursos, sendo muito utilizado em ambientes corporativos.\nLink: https://www.postman.com/downloads/\nOutras ferramentas Ainda, com relação ao Java, se você gosta de experimentar diferentes versões, uma alternativa para gerenciar elas facilmente é o SDKMAN. Mais detalhes neste outro artigo: Dev Tools Java\n","permalink":"https://gibatech.lptn.com.br/posts/ferramentas/instalacao-ferramentas/","summary":"As ferramentas descritas aqui são base para o desenvolvimento Java e podem ser obtidas gratuitamente (legalmente) através dos links disponibilizados\nIntellij Link: https://www.jetbrains.com/idea/download/\nAcesse a URL e faça download da versão Community para seu sistema operacional. Ele funciona da mesma forma no Linux, Mac ou Windows.\nJava Link: https://www.java.com/pt_BR/download/\nAcesse a URL e faça download para seu sistema.\nHá uma alternativa que pode ser utilizada sem problemas não vinculada à Oracle: O OpenJDK.","title":"Java: Ambiente de desenvolvimento"},{"content":"Introdução Neste tópico vamos falar sobre as ferramentas que normalmente são utilizadas em aplicações Java para tarefas rotineiras de build, como compilação, testes e cobertura, empacotamento, publicação\u0026hellip;\nAs mais conhecidas ferramentas para esta finalidade são o Gradle e o Maven.\nGlossário Artefato: no contexto deste artigo, para o Java, um Artefato corresponde a uma biblioteca que é compilada a partir de outro projeto Java, resultando um arquivo de extensão JAR. Classpath: no contexto deste artigo, para o Java, o classpath é o conjunto de recursos necessários para a execução da aplicação. Compoe esse classpath a próprias classes Java, resources, dependências (bibliotecas), etc. Por que utilizar uma ferramenta? Para quem está iniciando no Java, esta é uma pergunta clássica. Não basta aprender o Java, ainda tenho que aprender Maven ou Gradle? A resposta é: SIM. Não é algo que você precise se tornar especialista, mas é importante que conheça seu uso básico para não seguir caminhos complexos nos pontos que estas ferramentas resolvem com facilidade:\nGestão de dependências: O motivo principal para usar uma dessas ferramentas. Nada de baixar arquivos JAR e colocar em uma pasta LIB, ok? Basta declarar o Artefato no Maven/Gradle e deixar que ele baixe e adicione o mesmo ao Classpath.\nGarantia de versionamento Todas os artefatos gerados ou dependências que nosso projeto terá serão necessariamente versionados. E uma determinada versão não deve ser regerada, gerando uma garantia que nosso código sempre utilizará a versão testada das dependências.\n","permalink":"https://gibatech.lptn.com.br/posts/ferramentas/automacao-build/","summary":"Introdução Neste tópico vamos falar sobre as ferramentas que normalmente são utilizadas em aplicações Java para tarefas rotineiras de build, como compilação, testes e cobertura, empacotamento, publicação\u0026hellip;\nAs mais conhecidas ferramentas para esta finalidade são o Gradle e o Maven.\nGlossário Artefato: no contexto deste artigo, para o Java, um Artefato corresponde a uma biblioteca que é compilada a partir de outro projeto Java, resultando um arquivo de extensão JAR. Classpath: no contexto deste artigo, para o Java, o classpath é o conjunto de recursos necessários para a execução da aplicação.","title":"Automação de Build"},{"content":"Desenvolvimento JAVA em ambiente Linux: https://sdkman.io/ Permite instalar e alternar facilmente entre diferentes versões de várias ferramentas. Entre elas: Gradle, Grails, Groovy, Java, Kotlin, Maven, Scala, Spring Boot.\nEle baixa os pacotes e deixa configuradas as variáveis de ambiente, inclusive deixando os binários no PATH para serem executados diretamente, como se fosse uma instalação diretamente no sistema principal.\n","permalink":"https://gibatech.lptn.com.br/posts/ferramentas/dev-tools-java/","summary":"Desenvolvimento JAVA em ambiente Linux: https://sdkman.io/ Permite instalar e alternar facilmente entre diferentes versões de várias ferramentas. Entre elas: Gradle, Grails, Groovy, Java, Kotlin, Maven, Scala, Spring Boot.\nEle baixa os pacotes e deixa configuradas as variáveis de ambiente, inclusive deixando os binários no PATH para serem executados diretamente, como se fosse uma instalação diretamente no sistema principal.","title":"Ferramentas de Desenvolvimento"},{"content":"Envie aqui sua dúvida ou sugestão: Seu nome: Seu e-mail: Sua mensagem: Enviar ","permalink":"https://gibatech.lptn.com.br/contato/","summary":"Envie aqui sua dúvida ou sugestão: Seu nome: Seu e-mail: Sua mensagem: Enviar ","title":"Contato"},{"content":"O backend é a parte do sistema que trabalha em conjunto com o frontend, atuando como a \u0026ldquo;engrenagem\u0026rdquo; que executa as operações necessárias para obter, consolidar, processar e persistir informações. Toda vez que um usuário interage com o frontend, seja para obter informações ou salvar dados, o backend é acionado para executar essas tarefas.\nAssim, podemos dizer que o backend é responsável pelo processamento lógico do sistema, trabalhando em conjunto com o frontend para fornecer uma experiência completa e satisfatória para o usuário. É por meio do backend que os dados são armazenados, processados e transformados em informações úteis para o usuário.\nProcura por materiais de Frontend? Busque aqui: Guia Frontend.\nFrameworks Java Ao falarmos especificamente sobre o desenvolvimento de backend, é importante mencionar o Java, que é uma das linguagens mais utilizadas para essa finalidade. Com o objetivo de facilitar a estruturação de projetos, configurações e integrações com outras ferramentas, é possível utilizar frameworks específicos para a linguagem.\nOs frameworks de Java oferecem uma série de funcionalidades e recursos que permitem aos desenvolvedores se concentrarem nas tarefas principais do projeto, reduzindo o tempo e o esforço gastos com tarefas secundárias. Além disso, esses frameworks também ajudam a manter um padrão de desenvolvimento consistente, facilitando a manutenção e a escalabilidade do projeto.\nAlguns dos frameworks mais utilizados são:\nSpring Boot Quarkus Micronaut Outros frameworks e bibliotecas Além da função primária dos frameworks, podemos ter alguns sub-frameworks e bibliotecas especializadas para realizar algumas integrações ou facilidades em nossos projetos. Por exemplo podemos citar:\nLombok - Evita códigos repetitivos como acessores, construtores e métodos. MapStruct - Evita cópias repetitivas entre classes com atributos semelhantes. Hibernate - Persistência em bancos relacionais. JUnit 5 - Facilidades para execução de testes. Mockito - Isola dependências para execução de testes unitários. AspectJ - Torna as asserções em testes de forma fluída. Conclusão Espero que este material tenha te ajudado a entender um pouco mais sobre as ferramentas e siglas utilizadas no Backend. Deixe seu comentário com sugestões ou contando sua experiência estudando Java :)\nOutros materiais Para outros materiais de Frontend, acesse aqui: Tag Backend\n","permalink":"https://gibatech.lptn.com.br/backend/","summary":"O backend é a parte do sistema que trabalha em conjunto com o frontend, atuando como a \u0026ldquo;engrenagem\u0026rdquo; que executa as operações necessárias para obter, consolidar, processar e persistir informações. Toda vez que um usuário interage com o frontend, seja para obter informações ou salvar dados, o backend é acionado para executar essas tarefas.\nAssim, podemos dizer que o backend é responsável pelo processamento lógico do sistema, trabalhando em conjunto com o frontend para fornecer uma experiência completa e satisfatória para o usuário.","title":"Guia Backend"},{"content":"Este Guia é um resumo das tecnologias que você vai gostar de aprender para se desenvolver como Programador e fazer seu software de forma mais eficiente.\nFrontend Para conhecer sobre a parte visual da aplicação, comece por aqui:\nGuia Frontend Backend Para conhecer sobre a engrenagem que executa abaixo da parte visual, comece por aqui:\nGuia Backend Padrões RESTful - Um dos padrões de comunicação mais utilizados em APIs. Integrações Apache Kafka - Sistema de mensageria de alta performance ","permalink":"https://gibatech.lptn.com.br/guia/","summary":"Guia de ferramentas, bibliotecas e padrões para desenvolvimento Java e Programação Web","title":"Guia Tech"},{"content":"Sobre o REST Antes de tudo precisamos ententer que o REST (Representational state transfer) não é uma ferramenta, biblioteca nem mesmo um protocolo de comunicação.\nNa verdade ele é um estilo arquitetural utilizado para comunicação entre sistemas. Com outras palavras, podemos dizer que é um conjunto de princípios e definições que definem uma forma padronizada para realizar essa comunicação.\nConceitos importantes Ele é fortemente ancorado pelo protocolo HTTP, fazendo uso padronizado de URLs, verbos, status, cabeçalhos e tudo mais que o HTTP nos fornece.\nEmbora seja mais comum a utilização do formato JSON, ele não é uma restrição do REST, podendo ser utilizado XML, HTML, imagem, texto, etc.\nSe trata de uma comunicação Cliente-Servidor. Isso quer dizer que de um lado o Servidor se comporta como provedor do serviço, continuamente disponibilizando o serviço a ser acessado. Já no outro lado, podemos ter 0, 1 ou vários Clientes conectando por demanda sempre que precisarem acessar algum dos recursos disponibilizados pelo Servidor.\nO HTTP Métodos (ou Verbos) HTTP: Cada método possui uma finalidade específica que deve ser respeitada para deixar claro aos clientes qual o efeito esperado. Os métodos mais utilizados são:\nGET: usado para busca de informações. Não deve alterar dados no servidor.\nPOST: usado para criação de recursos no servidor.\nDELETE: usado para remoção de recursos existentes no servidor.\nPUT: usado para substituição de recursos previamente criados no servidor.\nPATCH: usado para atualização parcial de recursos previamente criados no servidor.\nStatus de retorno: Da mesma forma que os métodos. Os status code existentes no HTTP são utilizados. Os status mais utilizados são:\nStatus de sucesso: Ou seja, a operação foi realizada:\n200: acompanhada de retorno de informações. 204: sem informações de retorno. 201: com a criação de informações. 202: de forma assíncrona, ou seja, foi recebida para processamento. Status de erro de cliente: Ou seja, a operação não foi realizada, e a responsabilidade provavelmente é do cliente:\n400: e o motivo provavelmente está no retorno da requisição. 400: pois a informação solicitada não existe. 422: pois houve falha em uma validação de negócio. 401: por falta de autenticação. 403: por falta de permissão. Status de erro de servidor: Ou seja, a operação não foi realizada, e a responsabilidade provavelmente é do servidor:\n500: e o motivo provavelmente está no retorno da requisição. 503: pois o serviço está indisponível. 502: pois um serviço necessário está retornando algo inesperado. 504: pois um serviço necessário está demorando para responder. Mais informações: https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Status https://www.alura.com.br/artigos/rest-conceito-e-fundamentos Gosta de vídeo? REST // Dicionário do Programador - Código Fonte TV: O QUE É UMA API RESTful NA PRÁTICA? MATURIDADE DE RICHARDSON - Michelli Brito:\n","permalink":"https://gibatech.lptn.com.br/padroes/rest/","summary":"Padrão REST, RESTFul, APIs, JSON","title":"REST"}]